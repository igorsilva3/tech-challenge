{
  "openapi": "3.0.3",
  "info": {
    "title": "Tech challenge API Docs",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000/",
      "description": "Internal staging server for testing"
    }
  ],
  "paths": {
    "/users": {
      "post": {
        "summary": "Create a user.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "minLength": 3,
                    "nullable": false,
                    "example": "john.deep"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 8,
                    "nullable": false,
                    "pattern": "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])([a-zA-Z0-9]{8,})$",
                    "example": "Password123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server"
          }
        }
      }
    },
    "/auth": {
      "post": {
        "summary": "Authenticate a user.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "minLength": 3,
                    "nullable": false,
                    "example": "john.deep"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 8,
                    "nullable": false,
                    "pattern": "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])([a-zA-Z0-9]{8,})$",
                    "example": "Password123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    },
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiJ9.eyJ1c2VySWQiOiJiNDJkMDVlNy1kY2ExLTQ1ZmItYjVjYi1hOTM3ZmQ3NDc2NGQiLCJpYXQiOjE2Njg5ODE2NzgsImlzcyI6InVuZGVmaW5lZCIsImF1ZCI6InVuZGVmaW5lZCIsImV4cCI6MTY2ODk4MTc2NDQ0MX0.BCpf-I4iGCfoxnFVVrDvP-mxD0H3yrC5IuoGxc10e30"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server"
          }
        }
      }
    },
    "/users/account": {
      "get": {
        "summary": "Returns a user account.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server"
          }
        }
      }
    },
    "/users/account/transactions": {
      "post": {
        "summary": "Create a transactions between two user accounts.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Username that will be credited the balance ",
                    "example": "john.deep"
                  },
                  "value": {
                    "type": "number",
                    "description": "Amount to be credited.",
                    "example": 75
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server"
          }
        }
      },
      "get": {
        "summary": "Returns all transactions for a user account.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "cashIn",
            "description": "Filters transactions credited to the user's account",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "cashOut",
            "description": "Filters transactions debited to the user's account",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "createdAt",
            "description": "Filter transactions by user account creation date.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2022-11-20"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "description": "Para a utilização de alguns recursos é necessário ter um token JWT",
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "User": {
        "properties": {
          "id": {
            "type": "string",
            "example": "b42d05e7-dca1-45fb-b5cb-a937fd74764d"
          },
          "username": {
            "type": "string",
            "example": "john.deep"
          },
          "account": {
            "$ref": "#/components/schemas/Account"
          },
          "createdAt": {
            "type": "string",
            "example": "2022-11-20T21:42:17.815Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2022-11-20T21:42:17.815Z"
          }
        }
      },
      "Account": {
        "properties": {
          "id": {
            "type": "string",
            "example": "b42d05e7-dca1-45fb-b5cb-a937fd74764d"
          },
          "balance": {
            "type": "number",
            "example": 100
          }
        }
      },
      "Transaction": {
        "properties": {
          "id": {
            "type": "string",
            "example": "b42d05e7-dca1-45fb-b5cb-a937fd74764d"
          },
          "value": {
            "type": "number",
            "example": 100
          },
          "debitedAccountId": {
            "type": "string",
            "example": "b42d05e7-dca1-45fb-b5cb-a937fd74764d"
          },
          "creditedAccountId": {
            "type": "string",
            "example": "a06fbd4c-e4f1-44d8-b06f-cc858fd28968"
          },
          "createdAt": {
            "type": "string",
            "example": "2022-11-20T21:42:17.815Z"
          }
        }
      }
    }
  }
}